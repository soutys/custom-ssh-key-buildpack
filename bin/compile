#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Generates an SSH config file for connections if a config var exists.

set -Eeuo pipefail

ENV_DIR="${3:-/tmp/env}"

if [[ -z "${CUSTOM_SSH_KEY:-}" && -z "${CUSTOM_SSH_KEY_HOSTS:-}" && -f "${ENV_DIR}/CUSTOM_SSH_KEY" && -f "${ENV_DIR}/CUSTOM_SSH_KEY_HOSTS" ]]; then
    CUSTOM_SSH_KEY="`cat ${ENV_DIR}/CUSTOM_SSH_KEY`"
    CUSTOM_SSH_KEY_HOSTS="`cat ${ENV_DIR}/CUSTOM_SSH_KEY_HOSTS`"
fi

echo "" >&1

if [[ -n "${CUSTOM_SSH_KEY:-}" && -n "${CUSTOM_SSH_KEY_HOSTS:-}" ]]; then

  # Ensure we have an ~/.ssh folder
  if [ ! -d ~/.ssh ]; then
    mkdir --mode u=rwx,go= --parents ~/.ssh
  fi

  # Load the private key into custom_key file.
  echo "${CUSTOM_SSH_KEY}" | base64 --decode > ~/.ssh/custom_key

  # Change the permissions on the file to
  # be read-only for this user.
  chmod u=rw,go= ~/.ssh/custom_key

  # Split $CUSTOM_SSH_KEY_HOSTS
  IFS=',' ;for element in ${CUSTOM_SSH_KEY_HOSTS};
  do
    echo -e "Host ${element}\n"\
            "  IdentityFile ~/.ssh/custom_key\n"\
            "  IdentitiesOnly yes\n"\
            "  UserKnownHostsFile /dev/null\n"\
            "  StrictHostKeyChecking no"\
            >> ~/.ssh/config
  done

  echo "-----> Successfully added custom SSH key"

else

  echo "-----> No custom SSH key found!"

fi
